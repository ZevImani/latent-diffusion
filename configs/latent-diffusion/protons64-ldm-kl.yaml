model:
  base_learning_rate: 5.0e-5   
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 300               ## Logging: frequency for progressive denoising 
    timesteps: 1000
    loss_type: l2                     
    first_stage_key: "image"
    # cond_stage_key: "image"      ## Unconditional 
    # cond_stage_key: "class_label"     ## Class-based condition (WiP)
    cond_stage_key: "momentum"     ## Condition on momentum 
    image_size: 64
    channels: 1
    cond_stage_trainable: True     ## Embedder shouldn't train? 
    conditioning_key: crossattn       
    concat_mode: False                
    scale_by_std: True
    monitor: 'val/loss_simple_ema'
    # scale_factor: 0.18215
    # use_ema: False 

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [100] # [10000]
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [ 1.]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 16
        in_channels: 3
        out_channels: 3
        model_channels: 96 ## 96
        attention_resolutions: [ 1, 2, 4, 8]   # 32, 16, 8, 4
        num_res_blocks: 2
        channel_mult: [ 1,2,2,4,4]  # 32, 16, 8, 4, 2
        num_heads: 4
        # use_scale_shift_norm: True
        # resblock_updown: True
        use_spatial_transformer: True ## cond
        transformer_depth: 1 ## cond
        context_dim: 3 ## cond 
        legacy: False ## cond

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 3
        monitor: "val/rec_loss"
        ckpt_path: "protons64_ae_16x16x3/runs/checkpoints/last.ckpt"
        # ckpt_path: "protons64_ae_8x8x3/runs/checkpoints/last.ckpt"
        ddconfig:
          double_z: True
          z_channels: 3
          resolution: 64
          in_channels: 1
          out_ch: 1
          ch: 128
          ch_mult: [1,2,4]  # num_down = len(ch_mult)-1
          # ch_mult: [1,2,4,8]  # num_down = len(ch_mult)-1
          num_res_blocks: 2
          attn_resolutions: [ ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity
          disc_in_channels: 1       ## Added from AE config  

    # cond_stage_config: "__is_unconditional__"
    
    cond_stage_config: 
      target: ldm.modules.encoders.modules.MomentumEmbedder
      params:
        n_embed: 3
        # n_embed: 256 
    
    # Class Conditioning 
    # cond_stage_config:
    #   target: ldm.modules.encoders.modules.ClassEmbedder
    #   params:
    #     n_classes: 2
    #     embed_dim: 512
    #     key: "class_label" 

    # cond_stage_config: 
    #   target: ldm.modules.encoders.modules.TransformerEmbedder
    #   params:
    #     n_embed: 3
    #     n_layer: 1 
    #     vocab_size: 10



# data:
#   target: main.DataModuleFromConfig
#   params:
#     batch_size: 16
#     num_workers: 2
#     wrap: True
#     train:
#       target: ldm.data.protons64.protons64Train 
#       params:
#         size: 64 
#         events_per_batch: 128
#         num_batches: 1152 ## set by hand (TODO)
#     validation:
#       target: ldm.data.protons64.protons64Validation
#       params:
#         size: 64
#         events_per_batch: 128
#         num_batches: 152 ## set by hand (TODO)

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 16
    num_workers: 2
    wrap: False ## True
    train:
      target: ldm.data.protons64.protons64xTrain 
      params:
        size: 64 
        events_per_batch: 64
        num_batches: 311 ## set by hand (TODO)
    validation:
      target: ldm.data.protons64.protons64xValidation
      params:
        size: 64
        events_per_batch: 64
        num_batches: 42 ## set by hand (TODO)


lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 2500
        max_images: 8
        increase_log_steps: False
    
    # checkpoint_iter_freq: 
    #   target: main.CheckpointEveryNSteps
    #   params: 
    #     save_step_frequency: 1000  

  trainer:
    benchmark: False 
    # max_steps: 10000
    max_epochs: 25
    val_check_interval: 200   ## 1000 Validation Frequency  